# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.post_asset_dto_geolocation import PostAssetDtoGeolocation
from swagger_server import util


class PostAssetDto(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, device_class: str=None, device_manual: str=None, device_revision: str=None, hardware_revision: str=None, manufacturer: str=None, manufacturer_uri: str=None, model: str=None, product_code: str=None, product_instance_uri: str=None, publisher_instance_uri: str=None, revision_counter: float=None, serial_number: str=None, software_revision: str=None, geolocation: PostAssetDtoGeolocation=None, remote_management_url: str=None, status: str=None):  # noqa: E501
        """PostAssetDto - a model defined in Swagger

        :param device_class: The device_class of this PostAssetDto.  # noqa: E501
        :type device_class: str
        :param device_manual: The device_manual of this PostAssetDto.  # noqa: E501
        :type device_manual: str
        :param device_revision: The device_revision of this PostAssetDto.  # noqa: E501
        :type device_revision: str
        :param hardware_revision: The hardware_revision of this PostAssetDto.  # noqa: E501
        :type hardware_revision: str
        :param manufacturer: The manufacturer of this PostAssetDto.  # noqa: E501
        :type manufacturer: str
        :param manufacturer_uri: The manufacturer_uri of this PostAssetDto.  # noqa: E501
        :type manufacturer_uri: str
        :param model: The model of this PostAssetDto.  # noqa: E501
        :type model: str
        :param product_code: The product_code of this PostAssetDto.  # noqa: E501
        :type product_code: str
        :param product_instance_uri: The product_instance_uri of this PostAssetDto.  # noqa: E501
        :type product_instance_uri: str
        :param publisher_instance_uri: The publisher_instance_uri of this PostAssetDto.  # noqa: E501
        :type publisher_instance_uri: str
        :param revision_counter: The revision_counter of this PostAssetDto.  # noqa: E501
        :type revision_counter: float
        :param serial_number: The serial_number of this PostAssetDto.  # noqa: E501
        :type serial_number: str
        :param software_revision: The software_revision of this PostAssetDto.  # noqa: E501
        :type software_revision: str
        :param geolocation: The geolocation of this PostAssetDto.  # noqa: E501
        :type geolocation: PostAssetDtoGeolocation
        :param remote_management_url: The remote_management_url of this PostAssetDto.  # noqa: E501
        :type remote_management_url: str
        :param status: The status of this PostAssetDto.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'device_class': str,
            'device_manual': str,
            'device_revision': str,
            'hardware_revision': str,
            'manufacturer': str,
            'manufacturer_uri': str,
            'model': str,
            'product_code': str,
            'product_instance_uri': str,
            'publisher_instance_uri': str,
            'revision_counter': float,
            'serial_number': str,
            'software_revision': str,
            'geolocation': PostAssetDtoGeolocation,
            'remote_management_url': str,
            'status': str
        }

        self.attribute_map = {
            'device_class': 'DeviceClass',
            'device_manual': 'DeviceManual',
            'device_revision': 'DeviceRevision',
            'hardware_revision': 'HardwareRevision',
            'manufacturer': 'Manufacturer',
            'manufacturer_uri': 'ManufacturerUri',
            'model': 'Model',
            'product_code': 'ProductCode',
            'product_instance_uri': 'ProductInstanceUri',
            'publisher_instance_uri': 'PublisherInstanceUri',
            'revision_counter': 'RevisionCounter',
            'serial_number': 'SerialNumber',
            'software_revision': 'SoftwareRevision',
            'geolocation': 'geolocation',
            'remote_management_url': 'remoteManagementUrl',
            'status': 'status'
        }

        self._device_class = device_class
        self._device_manual = device_manual
        self._device_revision = device_revision
        self._hardware_revision = hardware_revision
        self._manufacturer = manufacturer
        self._manufacturer_uri = manufacturer_uri
        self._model = model
        self._product_code = product_code
        self._product_instance_uri = product_instance_uri
        self._publisher_instance_uri = publisher_instance_uri
        self._revision_counter = revision_counter
        self._serial_number = serial_number
        self._software_revision = software_revision
        self._geolocation = geolocation
        self._remote_management_url = remote_management_url
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'PostAssetDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PostAssetDto of this PostAssetDto.  # noqa: E501
        :rtype: PostAssetDto
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_class(self) -> str:
        """Gets the device_class of this PostAssetDto.


        :return: The device_class of this PostAssetDto.
        :rtype: str
        """
        return self._device_class

    @device_class.setter
    def device_class(self, device_class: str):
        """Sets the device_class of this PostAssetDto.


        :param device_class: The device_class of this PostAssetDto.
        :type device_class: str
        """
        if device_class is None:
            raise ValueError("Invalid value for `device_class`, must not be `None`")  # noqa: E501

        self._device_class = device_class

    @property
    def device_manual(self) -> str:
        """Gets the device_manual of this PostAssetDto.


        :return: The device_manual of this PostAssetDto.
        :rtype: str
        """
        return self._device_manual

    @device_manual.setter
    def device_manual(self, device_manual: str):
        """Sets the device_manual of this PostAssetDto.


        :param device_manual: The device_manual of this PostAssetDto.
        :type device_manual: str
        """
        if device_manual is None:
            raise ValueError("Invalid value for `device_manual`, must not be `None`")  # noqa: E501

        self._device_manual = device_manual

    @property
    def device_revision(self) -> str:
        """Gets the device_revision of this PostAssetDto.


        :return: The device_revision of this PostAssetDto.
        :rtype: str
        """
        return self._device_revision

    @device_revision.setter
    def device_revision(self, device_revision: str):
        """Sets the device_revision of this PostAssetDto.


        :param device_revision: The device_revision of this PostAssetDto.
        :type device_revision: str
        """
        if device_revision is None:
            raise ValueError("Invalid value for `device_revision`, must not be `None`")  # noqa: E501

        self._device_revision = device_revision

    @property
    def hardware_revision(self) -> str:
        """Gets the hardware_revision of this PostAssetDto.


        :return: The hardware_revision of this PostAssetDto.
        :rtype: str
        """
        return self._hardware_revision

    @hardware_revision.setter
    def hardware_revision(self, hardware_revision: str):
        """Sets the hardware_revision of this PostAssetDto.


        :param hardware_revision: The hardware_revision of this PostAssetDto.
        :type hardware_revision: str
        """
        if hardware_revision is None:
            raise ValueError("Invalid value for `hardware_revision`, must not be `None`")  # noqa: E501

        self._hardware_revision = hardware_revision

    @property
    def manufacturer(self) -> str:
        """Gets the manufacturer of this PostAssetDto.


        :return: The manufacturer of this PostAssetDto.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer: str):
        """Sets the manufacturer of this PostAssetDto.


        :param manufacturer: The manufacturer of this PostAssetDto.
        :type manufacturer: str
        """
        if manufacturer is None:
            raise ValueError("Invalid value for `manufacturer`, must not be `None`")  # noqa: E501

        self._manufacturer = manufacturer

    @property
    def manufacturer_uri(self) -> str:
        """Gets the manufacturer_uri of this PostAssetDto.


        :return: The manufacturer_uri of this PostAssetDto.
        :rtype: str
        """
        return self._manufacturer_uri

    @manufacturer_uri.setter
    def manufacturer_uri(self, manufacturer_uri: str):
        """Sets the manufacturer_uri of this PostAssetDto.


        :param manufacturer_uri: The manufacturer_uri of this PostAssetDto.
        :type manufacturer_uri: str
        """
        if manufacturer_uri is None:
            raise ValueError("Invalid value for `manufacturer_uri`, must not be `None`")  # noqa: E501

        self._manufacturer_uri = manufacturer_uri

    @property
    def model(self) -> str:
        """Gets the model of this PostAssetDto.


        :return: The model of this PostAssetDto.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this PostAssetDto.


        :param model: The model of this PostAssetDto.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def product_code(self) -> str:
        """Gets the product_code of this PostAssetDto.


        :return: The product_code of this PostAssetDto.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code: str):
        """Sets the product_code of this PostAssetDto.


        :param product_code: The product_code of this PostAssetDto.
        :type product_code: str
        """
        if product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")  # noqa: E501

        self._product_code = product_code

    @property
    def product_instance_uri(self) -> str:
        """Gets the product_instance_uri of this PostAssetDto.


        :return: The product_instance_uri of this PostAssetDto.
        :rtype: str
        """
        return self._product_instance_uri

    @product_instance_uri.setter
    def product_instance_uri(self, product_instance_uri: str):
        """Sets the product_instance_uri of this PostAssetDto.


        :param product_instance_uri: The product_instance_uri of this PostAssetDto.
        :type product_instance_uri: str
        """
        if product_instance_uri is None:
            raise ValueError("Invalid value for `product_instance_uri`, must not be `None`")  # noqa: E501

        self._product_instance_uri = product_instance_uri

    @property
    def publisher_instance_uri(self) -> str:
        """Gets the publisher_instance_uri of this PostAssetDto.


        :return: The publisher_instance_uri of this PostAssetDto.
        :rtype: str
        """
        return self._publisher_instance_uri

    @publisher_instance_uri.setter
    def publisher_instance_uri(self, publisher_instance_uri: str):
        """Sets the publisher_instance_uri of this PostAssetDto.


        :param publisher_instance_uri: The publisher_instance_uri of this PostAssetDto.
        :type publisher_instance_uri: str
        """
        if publisher_instance_uri is None:
            raise ValueError("Invalid value for `publisher_instance_uri`, must not be `None`")  # noqa: E501

        self._publisher_instance_uri = publisher_instance_uri

    @property
    def revision_counter(self) -> float:
        """Gets the revision_counter of this PostAssetDto.


        :return: The revision_counter of this PostAssetDto.
        :rtype: float
        """
        return self._revision_counter

    @revision_counter.setter
    def revision_counter(self, revision_counter: float):
        """Sets the revision_counter of this PostAssetDto.


        :param revision_counter: The revision_counter of this PostAssetDto.
        :type revision_counter: float
        """
        if revision_counter is None:
            raise ValueError("Invalid value for `revision_counter`, must not be `None`")  # noqa: E501

        self._revision_counter = revision_counter

    @property
    def serial_number(self) -> str:
        """Gets the serial_number of this PostAssetDto.


        :return: The serial_number of this PostAssetDto.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number: str):
        """Sets the serial_number of this PostAssetDto.


        :param serial_number: The serial_number of this PostAssetDto.
        :type serial_number: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def software_revision(self) -> str:
        """Gets the software_revision of this PostAssetDto.


        :return: The software_revision of this PostAssetDto.
        :rtype: str
        """
        return self._software_revision

    @software_revision.setter
    def software_revision(self, software_revision: str):
        """Sets the software_revision of this PostAssetDto.


        :param software_revision: The software_revision of this PostAssetDto.
        :type software_revision: str
        """
        if software_revision is None:
            raise ValueError("Invalid value for `software_revision`, must not be `None`")  # noqa: E501

        self._software_revision = software_revision

    @property
    def geolocation(self) -> PostAssetDtoGeolocation:
        """Gets the geolocation of this PostAssetDto.


        :return: The geolocation of this PostAssetDto.
        :rtype: PostAssetDtoGeolocation
        """
        return self._geolocation

    @geolocation.setter
    def geolocation(self, geolocation: PostAssetDtoGeolocation):
        """Sets the geolocation of this PostAssetDto.


        :param geolocation: The geolocation of this PostAssetDto.
        :type geolocation: PostAssetDtoGeolocation
        """

        self._geolocation = geolocation

    @property
    def remote_management_url(self) -> str:
        """Gets the remote_management_url of this PostAssetDto.


        :return: The remote_management_url of this PostAssetDto.
        :rtype: str
        """
        return self._remote_management_url

    @remote_management_url.setter
    def remote_management_url(self, remote_management_url: str):
        """Sets the remote_management_url of this PostAssetDto.


        :param remote_management_url: The remote_management_url of this PostAssetDto.
        :type remote_management_url: str
        """

        self._remote_management_url = remote_management_url

    @property
    def status(self) -> str:
        """Gets the status of this PostAssetDto.


        :return: The status of this PostAssetDto.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this PostAssetDto.


        :param status: The status of this PostAssetDto.
        :type status: str
        """

        self._status = status
