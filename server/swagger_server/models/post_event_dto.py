# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PostEventDto(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, product_instance_uri: str=None, name: str=None):  # noqa: E501
        """PostEventDto - a model defined in Swagger

        :param product_instance_uri: The product_instance_uri of this PostEventDto.  # noqa: E501
        :type product_instance_uri: str
        :param name: The name of this PostEventDto.  # noqa: E501
        :type name: str
        """
        self.swagger_types = {
            'product_instance_uri': str,
            'name': str
        }

        self.attribute_map = {
            'product_instance_uri': 'ProductInstanceUri',
            'name': 'name'
        }

        self._product_instance_uri = product_instance_uri
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'PostEventDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PostEventDto of this PostEventDto.  # noqa: E501
        :rtype: PostEventDto
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_instance_uri(self) -> str:
        """Gets the product_instance_uri of this PostEventDto.


        :return: The product_instance_uri of this PostEventDto.
        :rtype: str
        """
        return self._product_instance_uri

    @product_instance_uri.setter
    def product_instance_uri(self, product_instance_uri: str):
        """Sets the product_instance_uri of this PostEventDto.


        :param product_instance_uri: The product_instance_uri of this PostEventDto.
        :type product_instance_uri: str
        """
        if product_instance_uri is None:
            raise ValueError("Invalid value for `product_instance_uri`, must not be `None`")  # noqa: E501

        self._product_instance_uri = product_instance_uri

    @property
    def name(self) -> str:
        """Gets the name of this PostEventDto.


        :return: The name of this PostEventDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PostEventDto.


        :param name: The name of this PostEventDto.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
